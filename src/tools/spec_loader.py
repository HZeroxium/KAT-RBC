# /src/tools/spec_loader.py
import uuid
from pathlib import Path
from .base import BaseTool
from schemas.index import (
    SpecLoaderInput,
    SpecLoaderOutput,
    ParsedSpec,
    Operation,
)

from schemas.spec_loader import (
    APIResponse,
    ResponseSchema,
    SchemaProperty,
)

from schemas.base import HTTPMethod


class SpecLoaderTool(BaseTool[SpecLoaderInput, SpecLoaderOutput]):
    def _generate_mock_data(self) -> ParsedSpec:
        """Generate mock data for ParsedSpec."""
        dummy_op = Operation(
            operation_id="getFlights",
            path="/flights",
            method=HTTPMethod.GET,
            summary="List flights",
            description="Mock operation generated by SpecLoaderTool",
            parameters=[],
            responses=[
                APIResponse(
                    status_code=200,
                    schema_ref="#/components/schemas/FlightList",
                    description="Success response with flight listing",
                )
            ],
        )

        spec = ParsedSpec(
            title="Mock Airline API",
            version="0.0.1",
            operations=[dummy_op],
            components={
                "Flight": ResponseSchema(
                    name="Flight",
                    properties={
                        "id": SchemaProperty(
                            name="id",
                            type="string",
                            description="PK",
                            example="flight-123",  # Add the missing example field
                        )
                    },
                )
            },
        )
        return spec

    def run(self, payload: SpecLoaderInput) -> SpecLoaderOutput:
        # In a real implementation, we would parse the YAML/JSON here
        # For now, return mock data
        parsed_spec = self._generate_mock_data()
        return SpecLoaderOutput(parsed_spec=parsed_spec)
